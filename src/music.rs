use alloc::vec;
use alloc::vec::Vec;
use crate::util::{outb, inb};
use crate::interrupts::pit::{sleep_busy, PIT_BASE_FREQUENCY};

pub fn play_melody(melody: &Vec<(u16, u16)>) {
    let length = melody.len();  
    for (i, &(frequency, duration)) in melody.iter().enumerate() {
        if frequency == 0 {
            println!("{}/{}: Pause for {}ms", i + 1, length, duration);
            stop_sound();
        } else {
            println!("{}/{}: {}Hz for {}ms", i + 1, length, frequency, duration);
            set_sound(frequency);
        }
        sleep_busy(duration as u32);
    }
    stop_sound();
}

fn set_sound(frequency: u16) {
    let speaker_ctrl = 0x61;
    let pit_ctrl = 0x43;
    let pit_data = 0x42;
    let divisor: u16 = (PIT_BASE_FREQUENCY / frequency as u32) as u16;

    outb(pit_ctrl, 0xb6); // square wave mode
    outb(pit_data, (divisor & 0xff) as u8);
    outb(pit_data, (divisor >> 8) as u8);

    let temp = inb(speaker_ctrl);
    outb(speaker_ctrl, temp | 0x3); // enable
}

fn stop_sound() {
    let speaker_ctrl = 0x61;
    let temp = inb(speaker_ctrl);
    outb(speaker_ctrl, temp & !0x3);
}

pub fn play_songs() {
    let tadc: Vec<(u16, u16)> = vec!(
        (262, 41), (294, 125), (311, 250), (0, 750), (466, 250), (392, 500), (349, 250), (311, 250), (0, 750), (466, 250), (392, 500), (349, 125), (370, 125), (392, 250), (0, 750), (466, 250), (392, 500), (349, 250), (311, 250), (262, 250), (311, 250), (349, 250), (466, 250), (233, 250), (311, 250), (349, 250), (311, 250), (0, 750), (466, 250), (392, 500), (349, 250), (311, 250), (0, 750), (466, 250), (392, 500), (349, 125), (370, 125), (392, 250), (0, 750), (466, 250), (392, 500), (349, 250), (311, 250), (262, 250), (311, 250), (349, 250), (466, 250), (233, 250), (311, 250), (349, 250), (392, 250), (0, 125), (311, 250), (0, 125), (233, 250), (392, 250), (0, 125), (311, 250), (0, 125), (233, 250), (311, 250), (0, 125), (262, 250), (0, 125), (233, 250), (0, 500), (117, 125), (156, 125), (175, 125), (185, 125), (392, 250), (0, 125), (311, 250), (0, 125), (233, 250), (392, 250), (0, 125), (311, 250), (0, 125), (233, 250), (262, 250), (0, 125), (262, 250), (0, 375), (277, 250), (233, 250), (349, 250), (277, 250), (392, 250), (0, 125), (311, 250), (0, 125), (233, 250), (392, 250), (0, 125), (311, 250), (0, 125), (233, 250), (311, 250), (0, 125), (262, 250), (0, 125), (233, 250), (0, 500), (117, 125), (156, 125), (175, 125), (185, 125), (392, 250), (0, 125), (311, 250), (0, 125), (233, 250), (392, 250), (0, 125), (349, 250), (0, 125), (311, 250), (349, 250), (0, 125), (349, 250), (0, 125), (370, 250), (0, 750), (370, 250), (0, 1000), (466, 250), (392, 500), (349, 250), (311, 250), (0, 750), (466, 250), (392, 500), (349, 125), (370, 125), (392, 250), (0, 750), (466, 250), (392, 500), (349, 250), (311, 250), (262, 250), (311, 250), (349, 250), (466, 250), (233, 250), (311, 250), (349, 250), (311, 250), (0, 750), (466, 250), (392, 500), (349, 250), (311, 250), (0, 750), (466, 250), (392, 500), (349, 125), (370, 125), (392, 250), (0, 750), (466, 250), (392, 500), (349, 250), (311, 250), (262, 250), (311, 250), (349, 250), (466, 250), (233, 250), (311, 250), (349, 250), (392, 250), (0, 125), (311, 250), (0, 125), (233, 250), (392, 250), (0, 125), (311, 250), (0, 125), (233, 250), (311, 250), (0, 125), (262, 250), (0, 125), (233, 250), (0, 500), (117, 125), (156, 125), (175, 125), (185, 125), (392, 250), (0, 125), (311, 250), (0, 125), (233, 250), (392, 250), (0, 125), (311, 250), (0, 125), (233, 250), (262, 250), (0, 125), (262, 250), (0, 375), (277, 250), (0, 250), (349, 250), (0, 250), (392, 250), (0, 125), (311, 250), (0, 125), (233, 250), (392, 250), (0, 125), (311, 250), (0, 125), (233, 250), (311, 250), (0, 125), (262, 250), (0, 125), (233, 250), (0, 500), (117, 125), (156, 125), (175, 125), (185, 125), (392, 250), (0, 125), (311, 250), (0, 125), (233, 250), (392, 250), (0, 125), (349, 250), (0, 125), (311, 250), (349, 250), (0, 125), (349, 250), (0, 125), (262, 250), (311, 250), (0, 250), (294, 250), (0, 250), (330, 250), (0, 250), (311, 250), (0, 250), (330, 250), (0, 750), (494, 250), (415, 500), (370, 250), (330, 250), (0, 750), (494, 250), (415, 500), (370, 125), (392, 125), (415, 250), (0, 750), (494, 250), (415, 500), (370, 250), (330, 250), (277, 250), (330, 250), (370, 250), (494, 250), (247, 250), (330, 250), (370, 250), (330, 250), (0, 750), (494, 250), (415, 500), (370, 250), (330, 250), (0, 750), (494, 250), (415, 500), (370, 125), (392, 125), (415, 250), (0, 750), (494, 250), (415, 500), (370, 250), (330, 250), (277, 250), (330, 250), (370, 250), (494, 250), (277, 250), (330, 250), (370, 250), (0, 2000), (415, 250), (0, 250), (330, 250), (370, 250), (415, 250), (0, 250), (392, 250), (370, 250), (330, 2000), (349, 666), (392, 166), (440, 166), (523, 500), (494, 250), (440, 250)
    );

    let spider_dance: Vec<(u16, u16)> = vec!(
        (1047, 250), (831, 125), (1047, 125), (698, 125), (831, 125), (523, 125), (698, 125), (831, 250), (698, 125), (831, 125), (554, 125), (698, 125), (415, 125), (554, 250), (415, 125), (831, 125), (554, 125), (784, 125), (831, 125), (698, 125), (784, 125), (659, 125), (698, 250), (659, 125), (784, 125), (698, 125), (659, 125), (784, 125), (698, 125), (523, 125), (698, 125), (784, 125), (831, 125), (698, 125), (831, 125), (932, 125), (1047, 125), (932, 125), (831, 125), (784, 125), (831, 125), (784, 125), (698, 125), (784, 125), (698, 125), (784, 125), (1245, 125), (698, 125), (1109, 125), (1245, 125), (1047, 125), (1109, 125), (932, 125), (1047, 125), (831, 125), (932, 125), (1047, 750), (831, 125), (1047, 125), (698, 125), (831, 125), (523, 125), (698, 125), (831, 250), (698, 125), (784, 625), (831, 250), (698, 125), (784, 625), (831, 250), (698, 125), (784, 250), (1109, 125), (1047, 125), (1109, 125), (1047, 250), (1397, 125), (1047, 125), (932, 125), (1397, 125), (831, 125), (932, 250), (831, 125), (932, 500), (831, 125), (932, 125), (988, 125), (932, 125), (831, 125), (932, 125), (659, 125), (831, 125), (523, 125), (659, 125), (554, 250), (659, 250), (698, 500), (554, 52), (0, 72), (831, 52), (0, 72), (932, 52), (0, 72), (831, 52), (0, 72), (554, 52), (0, 72), (831, 52), (0, 72), (932, 52), (0, 72), (831, 52), (0, 72), (554, 52), (0, 72), (831, 52), (0, 72), (932, 52), (0, 72), (831, 52), (0, 72), (554, 52), (0, 72), (831, 52), (0, 72), (932, 52), (0, 72), (831, 52), (0, 72), (698, 52), (0, 72), (1047, 52), (0, 72), (1109, 52), (0, 72), (1047, 52), (0, 72), (698, 52), (0, 72), (1047, 52), (0, 72), (1109, 52), (0, 72), (1047, 52), (0, 72), (698, 52), (0, 72), (1047, 52), (0, 72), (1109, 52), (0, 72), (1047, 52), (0, 72), (698, 52), (0, 72), (1047, 52), (0, 72), (1109, 52), (0, 72), (1047, 52), (0, 72), (554, 52), (0, 72), (831, 52), (0, 72), (932, 52), (0, 72), (831, 52), (0, 72), (554, 52), (0, 72), (831, 52), (0, 72), (932, 52), (0, 72), (831, 52), (0, 72), (554, 52), (0, 72), (831, 52), (0, 72), (932, 52), (0, 72), (831, 52), (0, 72), (554, 52), (0, 72), (831, 52), (0, 72), (932, 52), (0, 72), (831, 52), (0, 72), (698, 52), (0, 72), (1047, 52), (0, 72), (1109, 52), (0, 72), (1047, 52), (0, 72), (698, 52), (0, 72), (1047, 52), (0, 72), (1109, 52), (0, 72), (1047, 52), (0, 72), (698, 52), (0, 72), (1047, 52), (0, 72), (1109, 52), (0, 72), (1047, 52), (0, 72), (698, 52), (0, 72), (1047, 52), (0, 72), (1109, 52), (0, 72), (1047, 52), (0, 72), (554, 52), (0, 72), (831, 52), (0, 72), (932, 52), (0, 72), (831, 52), (0, 72), (554, 52), (0, 72), (831, 52), (0, 72), (932, 52), (0, 72), (831, 52), (0, 72), (554, 52), (0, 72), (831, 52), (0, 72), (932, 52), (0, 72), (831, 52), (0, 72), (554, 52), (0, 72), (831, 52), (0, 72), (932, 52), (0, 72), (831, 52), (0, 72), (698, 52), (0, 72), (1047, 52), (0, 72), (1109, 52), (0, 72), (1047, 52), (0, 72), (698, 52), (0, 72), (1047, 52), (0, 72), (1109, 52), (0, 72), (1047, 52), (0, 72), (698, 52), (0, 72), (1047, 52), (0, 72), (1109, 52), (0, 72), (1047, 52), (0, 72), (698, 52), (0, 72), (1047, 52), (0, 72), (1109, 52), (0, 72), (1047, 52), (0, 72), (554, 52), (0, 72), (831, 52), (0, 72), (932, 52), (0, 72), (831, 52), (0, 72), (554, 52), (0, 72), (831, 52), (0, 72), (932, 52), (0, 72), (831, 52), (0, 72), (554, 52), (0, 72), (831, 52), (0, 72), (932, 52), (0, 72), (831, 52), (0, 72), (554, 52), (0, 72), (831, 52), (0, 72), (932, 52), (0, 72), (831, 52), (0, 72), (698, 52), (0, 72), (1047, 52), (0, 72), (1109, 52), (0, 72), (1047, 52), (0, 72), (698, 52), (0, 72), (1047, 52), (0, 72), (1109, 52), (0, 72), (1047, 52), (0, 72), (698, 52), (0, 72), (1047, 52), (0, 72), (1109, 52), (0, 72), (1047, 52), (0, 72), (698, 52), (0, 72), (1047, 52), (0, 72), (1109, 52), (0, 72), (1047, 52), (0, 72), (175, 250), (0, 250), (175, 250), (0, 250), (175, 250), (0, 250), (165, 125), (156, 125), (147, 125), (139, 125), (131, 250), (0, 250), (131, 250), (0, 250), (131, 250), (0, 250), (139, 125), (147, 125), (156, 125), (165, 125), (175, 250), (0, 250), (175, 250), (0, 250), (175, 250), (0, 250), (208, 250), (0, 250), (196, 250), (156, 88), (0, 36), (175, 88), (0, 36), (196, 250), (233, 125), (0, 125), (208, 250), (175, 125), (196, 125), (208, 375), (0, 125), (175, 250), (0, 250), (175, 250), (0, 250), (175, 250), (0, 250), (165, 125), (156, 125), (147, 125), (139, 125), (131, 250), (0, 250), (131, 250), (0, 250), (131, 250), (0, 250), (139, 125), (147, 125), (156, 125), (165, 125), (175, 250), (0, 250), (175, 250), (0, 250)
    );

    let ttfaf: Vec<(u16, u16)> = vec!(
        (311, 125), (262, 125), (349, 125), (262, 125), (392, 125), (262, 125), (311, 125), (262, 125), (349, 125), (262, 125), (392, 125), (262, 125), (415, 125), (262, 125), (349, 125), (262, 125), (466, 125), (262, 125), (392, 125), (262, 125), (415, 125), (262, 125), (349, 125), (262, 125), (392, 125), (262, 125), (311, 125), (262, 125), (349, 125), (233, 125), (294, 125), (233, 125), (311, 125), (262, 125), (349, 125), (262, 125), (392, 125), (262, 125), (311, 125), (262, 125), (349, 125), (262, 125), (392, 125), (262, 125), (415, 125), (262, 125), (349, 125), (262, 125), (466, 125), (262, 125), (392, 125), (262, 125), (415, 125), (262, 125), (349, 125), (262, 125), (392, 125), (262, 125), (311, 125), (262, 125), (349, 125), (262, 125), (294, 125), (262, 125), (311, 125), (233, 125), (349, 125), (233, 125), (392, 125), (233, 125), (311, 125), (233, 125), (349, 125), (233, 125), (392, 125), (233, 125), (415, 125), (233, 125), (349, 125), (233, 125), (466, 125), (233, 125), (392, 125), (233, 125), (415, 125), (233, 125), (349, 125), (233, 125), (392, 125), (233, 125), (311, 125), (233, 125), (349, 125), (233, 125), (294, 125), (233, 125), (311, 125), (208, 125), (349, 125), (208, 125), (392, 125), (208, 125), (311, 125), (208, 125), (349, 125), (208, 125), (392, 125), (208, 125), (415, 125), (208, 125), (349, 125), (208, 125), (466, 125), (196, 125), (392, 125), (196, 125), (415, 125), (196, 125), (349, 125), (196, 125), (392, 125), (196, 125), (311, 125), (196, 125), (349, 125), (196, 125), (294, 125), (196, 125), (311, 125), (262, 125), (349, 125), (262, 125), (392, 125), (262, 125), (311, 125), (262, 125), (349, 125), (262, 125), (392, 125), (262, 125), (415, 125), (262, 125), (349, 125), (262, 125), (466, 125), (262, 125), (392, 125), (262, 125), (415, 125), (262, 125), (349, 125), (262, 125), (392, 125), (262, 125), (311, 125), (262, 125), (349, 125), (233, 125), (294, 125), (233, 125), (311, 125), (262, 125), (349, 125), (262, 125), (392, 125), (262, 125), (311, 125), (262, 125), (349, 125), (262, 125), (392, 125), (262, 125), (415, 125), (262, 125), (349, 125), (262, 125), (466, 125), (262, 125), (392, 125), (262, 125), (415, 125), (262, 125), (349, 125), (262, 125), (392, 125), (262, 125), (311, 125), (262, 125), (349, 125), (262, 125), (294, 125), (262, 125), (311, 125), (208, 125), (349, 125), (208, 125), (392, 125), (208, 125), (311, 125), (208, 125), (349, 125), (208, 125), (392, 125), (208, 125), (415, 125), (208, 125), (349, 125), (208, 125), (466, 125), (208, 125), (392, 125), (208, 125), (415, 125), (208, 125), (349, 125), (208, 125), (392, 125), (208, 125), (311, 125), (208, 125), (349, 125), (208, 125), (294, 125), (208, 125), (311, 125), (196, 125), (349, 125), (196, 125), (392, 125), (196, 125), (311, 125), (196, 125), (349, 125), (196, 125), (392, 125), (196, 125), (415, 125), (196, 125), (349, 125), (196, 125), (466, 125), (415, 125), (392, 125), (311, 125), (233, 125), (294, 125), (311, 125), (349, 125), (466, 125), (587, 125), (622, 125), (587, 125), (466, 125), (415, 125), (392, 125), (415, 125), (622, 500), (523, 250), (622, 500), (523, 250), (622, 250), (523, 250), (622, 500), (523, 250), (622, 500), (523, 250), (622, 250), (523, 250), (784, 500), (523, 250), (784, 500), (523, 250), (784, 250), (523, 250), (784, 500), (523, 250), (784, 500), (523, 250), (784, 250), (523, 250), (698, 500), (523, 250), (698, 500), (523, 250), (698, 250), (523, 250), (698, 500), (523, 250), (698, 500), (523, 250), (698, 250), (523, 250), (622, 500), (523, 250), (622, 500), (523, 250), (622, 250), (523, 250), (587, 125), (494, 125), (523, 125), (587, 125), (622, 125), (523, 125), (587, 125), (622, 125), (698, 250), (784, 1250), (622, 250), (784, 500), (622, 250), (784, 250), (622, 250), (784, 500), (622, 250), (784, 500), (622, 250), (784, 250), (622, 250), (932, 500), (622, 250), (932, 500), (622, 250), (932, 250), (622, 250), (932, 500), (622, 250), (932, 500), (622, 250), (932, 250), (622, 250), (831, 500), (698, 250), (831, 500), (698, 250), (831, 250), (698, 250), (831, 500), (698, 250), (831, 500), (698, 250), (831, 250), (698, 250), (622, 125), (523, 125), (415, 125), (349, 125), (622, 125), (698, 125), (622, 125), (523, 125), (622, 125), (523, 125), (415, 125), (349, 125), (622, 125), (698, 125), (622, 125), (523, 125), (587, 250), (294, 250), (494, 250), (247, 250), (392, 250), (196, 250), (294, 250), (147, 250), (262, 250), (392, 250), (784, 1000), (698, 250), (622, 250), (698, 500), (784, 1000), (698, 250), (622, 250), (698, 500), (784, 250), (698, 500), (622, 500), (523, 1250), (392, 500), (698, 2000), (622, 500), (698, 500), (784, 250), (698, 750), (622, 500), (698, 500), (784, 250), (698, 500), (622, 500), (523, 250), (262, 125), (311, 125), (392, 125), (523, 125), (622, 125), (523, 125), (392, 125), (349, 125), (311, 125), (262, 125), (392, 125), (466, 125), (523, 125), (466, 125), (392, 125), (466, 125), (523, 500), (392, 1000), (349, 250), (311, 250), (349, 500), (311, 250), (392, 750), (262, 250), (311, 250), (349, 500), (392, 500), (349, 250), (311, 500), (262, 500), (311, 750), (104, 125), (78, 125), (156, 125), (78, 125), (349, 2000), (311, 500), (349, 500), (392, 250), (349, 750), (311, 500), (349, 500), (392, 250), (349, 750), (311, 500), (262, 375), (196, 125), (131, 125), (196, 125), (233, 125), (156, 125), (262, 125), (156, 125), (196, 125), (131, 125), (156, 125), (98, 125), (117, 125), (78, 125), (131, 125), (98, 125), (131, 125), (98, 125), (523, 1000), (466, 250), (392, 250), (466, 750), (392, 250), (466, 250), (523, 234), (0, 15), (311, 250), (392, 250), (415, 500), (466, 500), (415, 250), (392, 500), (311, 500), (392, 750), (156, 125), (78, 125), (131, 125), (78, 125), (349, 2000), (311, 500), (349, 500), (392, 250), (349, 750), (311, 500), (349, 500), (392, 250), (349, 500), (311, 500), (262, 750), (0, 250), (131, 250), (415, 500), (466, 500), (523, 750), (466, 750), (415, 500), (523, 750), (466, 750), (415, 500), (466, 750), (415, 750), (392, 500), (415, 500), (392, 250), (311, 750), (466, 500), (523, 500), (415, 250), (466, 750), (415, 500), (523, 500), (415, 250), (466, 750), (415, 500), (587, 2000), (117, 250), (0, 250), (466, 500), (622, 500), (698, 500), (784, 750), (698, 750), (622, 500), (932, 2750), (831, 750), (784, 500), (622, 750), (698, 1250), (784, 750), (831, 750), (784, 500), (698, 750), (784, 750), (698, 500), (784, 750), (698, 750), (622, 2500), (784, 750), (698, 750), (622, 1250), (698, 1250), (784, 750), (698, 750), (622, 500), (932, 750), (784, 1250), (831, 2500), (784, 250), (698, 750), (622, 500), (932, 2000), (233, 250), (0, 250), (622, 500), (784, 500), (932, 500), (1047, 2750), (932, 750), (698, 500), (784, 500), (932, 250), (784, 2250), (622, 1000), (698, 2000), (784, 750), (698, 750), (622, 500), (784, 2000), (147, 125), (117, 125), (98, 125), (117, 125), (622, 500), (784, 500), (932, 500), (1047, 2750), (932, 750), (698, 500), (784, 500), (932, 250), (784, 750), (698, 500), (784, 1000), (523, 500), (622, 500), (698, 1500), (622, 500), (698, 500), (784, 500), (698, 500), (622, 500), (523, 1000)
    );

    let melodies = [
        ("Spider Dance", spider_dance),
        ("The Amazing Digital Circus", tadc),
        ("Through the Fire and Flames", ttfaf),
    ];

    for (name, melody) in melodies.iter() {
        stop_sound();
        println!("Now playing: {:?}", name);
        sleep_busy(500);
        play_melody(melody);
        sleep_busy(1000);
    }
}